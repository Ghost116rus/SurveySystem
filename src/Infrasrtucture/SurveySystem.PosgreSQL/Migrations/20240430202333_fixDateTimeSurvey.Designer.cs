// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SurveySystem.PosgreSQL;

#nullable disable

namespace SurveySystem.PosgreSQL.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20240430202333_fixDateTimeSurvey")]
    partial class fixDateTimeSurvey
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FacultySurvey", b =>
                {
                    b.Property<Guid>("FacultiesId")
                        .HasColumnType("uuid")
                        .HasColumnName("faculties_id");

                    b.Property<Guid>("SurveysId")
                        .HasColumnType("uuid")
                        .HasColumnName("surveys_id");

                    b.HasKey("FacultiesId", "SurveysId")
                        .HasName("pk_faculty_survey");

                    b.HasIndex("SurveysId")
                        .HasDatabaseName("ix_faculty_survey_surveys_id");

                    b.ToTable("faculty_survey", "public");
                });

            modelBuilder.Entity("InstituteSurvey", b =>
                {
                    b.Property<Guid>("InstitutesId")
                        .HasColumnType("uuid")
                        .HasColumnName("institutes_id");

                    b.Property<Guid>("SurveysId")
                        .HasColumnType("uuid")
                        .HasColumnName("surveys_id");

                    b.HasKey("InstitutesId", "SurveysId")
                        .HasName("pk_institute_survey");

                    b.HasIndex("SurveysId")
                        .HasDatabaseName("ix_institute_survey_surveys_id");

                    b.ToTable("institute_survey", "public");
                });

            modelBuilder.Entity("QuestionQuestionEvaluationCriteria", b =>
                {
                    b.Property<Guid>("CriteriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("criteries_id");

                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("questions_id");

                    b.HasKey("CriteriesId", "QuestionsId")
                        .HasName("pk_question_question_evaluation_criteria");

                    b.HasIndex("QuestionsId")
                        .HasDatabaseName("ix_question_question_evaluation_criteria_questions_id");

                    b.ToTable("question_question_evaluation_criteria", "public");
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.Property<Guid>("QuestionsId")
                        .HasColumnType("uuid")
                        .HasColumnName("questions_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("QuestionsId", "TagsId")
                        .HasName("pk_question_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_question_tag_tags_id");

                    b.ToTable("question_tag", "public");
                });

            modelBuilder.Entity("SemesterSurvey", b =>
                {
                    b.Property<int>("SemestersNumber")
                        .HasColumnType("integer")
                        .HasColumnName("semesters_number");

                    b.Property<Guid>("SurveysId")
                        .HasColumnType("uuid")
                        .HasColumnName("surveys_id");

                    b.HasKey("SemestersNumber", "SurveysId")
                        .HasName("pk_semester_survey");

                    b.HasIndex("SurveysId")
                        .HasDatabaseName("ix_semester_survey_surveys_id");

                    b.ToTable("semester_survey", "public");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Base.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", "public");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Faculty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComment("Полное имя");

                    b.Property<Guid>("InstituteId")
                        .HasColumnType("uuid")
                        .HasColumnName("institute_id")
                        .HasComment("Идентификатор института");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name")
                        .HasComment("Сокращенное имя");

                    b.HasKey("Id")
                        .HasName("pk_faculty");

                    b.HasIndex("InstituteId")
                        .HasDatabaseName("ix_faculty_institute_id");

                    b.ToTable("faculty", "public");

                    b.HasComment("Кафедра");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Institute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComment("Полное имя");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name")
                        .HasComment("Сокращенное имя");

                    b.HasKey("Id")
                        .HasName("pk_institute");

                    b.ToTable("institute", "public");

                    b.HasComment("Институт");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Semester", b =>
                {
                    b.Property<int>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Number"));

                    b.HasKey("Number")
                        .HasName("pk_semesters");

                    b.ToTable("semesters", "public");

                    b.HasComment("Семестры");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasComment("Текст ответа");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answers_question_id");

                    b.ToTable("answers", "public");

                    b.HasComment("Ответы");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.AnswerCharacteristicValue", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacteristicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("AnswerId", "CharacteristicId")
                        .HasName("pk_answer_characteristics");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("ix_answer_characteristics_characteristic_id");

                    b.ToTable("answer_characteristics", "public");

                    b.HasComment("Влияние ответов на характеристики");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("CharacteristicType")
                        .HasColumnType("integer")
                        .HasColumnName("characteristic_type")
                        .HasComment("тип характеристики");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<double>("MaxValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(1.0)
                        .HasColumnName("max_value")
                        .HasComment("Максимальное значение характеристики");

                    b.Property<double>("MinValue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double precision")
                        .HasDefaultValue(0.0)
                        .HasColumnName("min_value")
                        .HasComment("Минимальное значение характеристики");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("NegativeDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("negative_description")
                        .HasComment("Отрицательное описание характеристики");

                    b.Property<string>("PositiveDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("positive_description")
                        .HasComment("Положительное описание характеристики");

                    b.HasKey("Id")
                        .HasName("pk_characteristics");

                    b.ToTable("characteristics", "public");

                    b.HasComment("характеристики");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<int>("MaxCountOfAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("max_count_of_answers")
                        .HasComment("Максимальное количество ответов");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasComment("Текст вопроса");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type")
                        .HasComment("Тип вопроса");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.ToTable("questions", "public");

                    b.HasComment("вопросы");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.QuestionEvaluationCriteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("criteria")
                        .HasComment("Критерий оценки вопроса");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.HasKey("Id")
                        .HasName("pk_question_criteries");

                    b.ToTable("question_criteries", "public");

                    b.HasComment("критерий оценки вопросов");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<bool>("IsRepetable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_repetable");

                    b.Property<bool>("IsVisible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_visible");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название опроса");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("pk_surveys");

                    b.HasIndex("CreatedByUserId")
                        .HasDatabaseName("ix_surveys_created_by_user_id");

                    b.HasIndex("ModifiedByUserId")
                        .HasDatabaseName("ix_surveys_modified_by_user_id");

                    b.ToTable("surveys", "public");

                    b.HasComment("Опросы");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.SurveyTestQuestion", b =>
                {
                    b.Property<Guid>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("survey_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("question_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.HasKey("SurveyId", "QuestionId")
                        .HasName("pk_survey_questions");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_survey_questions_question_id");

                    b.ToTable("survey_questions", "public");

                    b.HasComment("вопросы опроса");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<int>("EducationLevel")
                        .HasColumnType("integer")
                        .HasColumnName("education_level")
                        .HasComment("Уровень образования");

                    b.Property<Guid?>("FacultyId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("faculty_id");

                    b.Property<string>("GroupNumber")
                        .HasColumnType("text")
                        .HasColumnName("group_number")
                        .HasComment("Номер группы");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<DateTime>("StartDateOfLearning")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_of_learning")
                        .HasComment("Дата начала обучения");

                    b.HasKey("Id")
                        .HasName("pk_students");

                    b.HasIndex("FacultyId")
                        .HasDatabaseName("ix_students_faculty_id");

                    b.ToTable("students", "public");

                    b.HasComment("Студенты");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<bool>("IsActual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_actual")
                        .HasComment("Актуальность ответа");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid?>("StudentSurveyProgressId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_survey_progress_id");

                    b.Property<Guid>("SurveyProgressId")
                        .HasColumnType("uuid")
                        .HasColumnName("survey_progress_id");

                    b.HasKey("Id")
                        .HasName("pk_student_answers");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_student_answers_answer_id");

                    b.HasIndex("StudentSurveyProgressId")
                        .HasDatabaseName("ix_student_answers_student_survey_progress_id");

                    b.HasIndex("SurveyProgressId")
                        .HasDatabaseName("ix_student_answers_survey_progress_id");

                    b.ToTable("student_answers", "public");

                    b.HasComment("Ответы студентов");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentCharacteristic", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("student_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacteristicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("StudentId", "CharacteristicId")
                        .HasName("pk_student_characteristics");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("ix_student_characteristics_characteristic_id");

                    b.ToTable("student_characteristics", "public");

                    b.HasComment("Черты студентов");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentSurveyProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<int>("CurrentPostion")
                        .HasColumnType("integer")
                        .HasColumnName("current_postion");

                    b.Property<bool>("IsCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_completed");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid")
                        .HasColumnName("student_id");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid")
                        .HasColumnName("survey_id");

                    b.HasKey("Id")
                        .HasName("pk_student_progresses");

                    b.HasIndex("StudentId")
                        .HasDatabaseName("ix_student_progresses_student_id");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("ix_student_progresses_survey_id");

                    b.ToTable("student_progresses", "public");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date")
                        .HasDefaultValueSql("now() at time zone 'utc'")
                        .HasComment("Дата создания записи");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name")
                        .HasComment("Полное имя");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login")
                        .HasComment("Логин");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_date")
                        .HasComment("Дата изменения записи");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash")
                        .HasComment("Хеш пароля");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role")
                        .HasComment("Роль пользователя");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "public");

                    b.HasComment("Пользователь");
                });

            modelBuilder.Entity("SurveyTag", b =>
                {
                    b.Property<Guid>("SurveysId")
                        .HasColumnType("uuid")
                        .HasColumnName("surveys_id");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("uuid")
                        .HasColumnName("tags_id");

                    b.HasKey("SurveysId", "TagsId")
                        .HasName("pk_survey_tag");

                    b.HasIndex("TagsId")
                        .HasDatabaseName("ix_survey_tag_tags_id");

                    b.ToTable("survey_tag", "public");
                });

            modelBuilder.Entity("FacultySurvey", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Organization.Faculty", null)
                        .WithMany()
                        .HasForeignKey("FacultiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_faculty_survey_faculties_faculties_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_faculty_survey_surveys_surveys_id");
                });

            modelBuilder.Entity("InstituteSurvey", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Organization.Institute", null)
                        .WithMany()
                        .HasForeignKey("InstitutesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_institute_survey_institutes_institutes_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_institute_survey_surveys_surveys_id");
                });

            modelBuilder.Entity("QuestionQuestionEvaluationCriteria", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.QuestionEvaluationCriteria", null)
                        .WithMany()
                        .HasForeignKey("CriteriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_question_evaluation_criteria_question_evaluation_c");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_question_evaluation_criteria_questions_questions_id");
                });

            modelBuilder.Entity("QuestionTag", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_questions_questions_id");

                    b.HasOne("SurveySystem.Domain.Entities.Base.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_tags_tags_id");
                });

            modelBuilder.Entity("SemesterSurvey", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Organization.Semester", null)
                        .WithMany()
                        .HasForeignKey("SemestersNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_semester_survey_semesters_semesters_temp_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_semester_survey_surveys_surveys_id");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Faculty", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Organization.Institute", "Institute")
                        .WithMany("Faculties")
                        .HasForeignKey("InstituteId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_faculty_institutes_institute_id");

                    b.Navigation("Institute");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Answer", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.AnswerCharacteristicValue", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Answer", "Answer")
                        .WithMany("AnswerCharacteristicValues")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_characteristics_answers_answer_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Characteristic", "Characteristic")
                        .WithMany()
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_characteristics_characteristics_characteristic_id");

                    b.Navigation("Answer");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Survey", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Users.User", "CreatedByUser")
                        .WithMany("CreatedSurveys")
                        .HasForeignKey("CreatedByUserId")
                        .IsRequired()
                        .HasConstraintName("fk_surveys_users_created_by_user_id");

                    b.HasOne("SurveySystem.Domain.Entities.Users.User", "ModifiedByUser")
                        .WithMany("ModifiedSurveys")
                        .HasForeignKey("ModifiedByUserId")
                        .HasConstraintName("fk_surveys_users_modified_by_user_id");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ModifiedByUser");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.SurveyTestQuestion", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_questions_questions_question_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_questions_surveys_survey_id");

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.Student", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Organization.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired()
                        .HasConstraintName("fk_students_faculties_faculty_id");

                    b.HasOne("SurveySystem.Domain.Entities.Users.User", "User")
                        .WithOne("Student")
                        .HasForeignKey("SurveySystem.Domain.Entities.Users.Student", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_students_users_user_id");

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentAnswer", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Answer", "Answer")
                        .WithMany("StudentAnswers")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_answers_answers_answer_id");

                    b.HasOne("SurveySystem.Domain.Entities.Users.StudentSurveyProgress", null)
                        .WithMany("ActualAnswers")
                        .HasForeignKey("StudentSurveyProgressId")
                        .HasConstraintName("fk_student_answers_survey_progress_student_survey_progress_id");

                    b.HasOne("SurveySystem.Domain.Entities.Users.StudentSurveyProgress", "SurveyProgress")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyProgressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_answers_survey_progress_survey_progress_id");

                    b.Navigation("Answer");

                    b.Navigation("SurveyProgress");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentCharacteristic", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Characteristic", "Characteristic")
                        .WithMany()
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_characteristics_characteristics_characteristic_id");

                    b.HasOne("SurveySystem.Domain.Entities.Users.Student", "Student")
                        .WithMany("StudentCharacteristics")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_characteristics_students_student_id");

                    b.Navigation("Characteristic");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentSurveyProgress", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Users.Student", "Student")
                        .WithMany("Progresses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_progresses_students_student_id");

                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_student_progresses_surveys_survey_id");

                    b.Navigation("Student");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyTag", b =>
                {
                    b.HasOne("SurveySystem.Domain.Entities.Surveys.Survey", null)
                        .WithMany()
                        .HasForeignKey("SurveysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_tag_surveys_surveys_id");

                    b.HasOne("SurveySystem.Domain.Entities.Base.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_survey_tag_tags_tags_id");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Faculty", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Organization.Institute", b =>
                {
                    b.Navigation("Faculties");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Answer", b =>
                {
                    b.Navigation("AnswerCharacteristicValues");

                    b.Navigation("StudentAnswers");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Surveys.Survey", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.Student", b =>
                {
                    b.Navigation("Progresses");

                    b.Navigation("StudentCharacteristics");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.StudentSurveyProgress", b =>
                {
                    b.Navigation("ActualAnswers");

                    b.Navigation("Answers");
                });

            modelBuilder.Entity("SurveySystem.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("CreatedSurveys");

                    b.Navigation("ModifiedSurveys");

                    b.Navigation("Student");
                });
#pragma warning restore 612, 618
        }
    }
}
